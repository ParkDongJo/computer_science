package data_structure_stack;

import java.util.Arrays;

public class ProgramersTowel {

    /**
     문제 설명
     수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.

     예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다.

     송신 탑(높이)	수신 탑(높이)
     5(4)	4(7)
     4(7)	2(9)
     3(5)	2(9)
     2(9)	-
     1(6)	-
     맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요.

     제한 사항
     heights는 길이 2 이상 100 이하인 정수 배열입니다.
     모든 탑의 높이는 1 이상 100 이하입니다.
     신호를 수신하는 탑이 없으면 0으로 표시합니다.
     입출력 예
     heights	return
     [6,9,5,7,4]	[0,0,2,2,4]
     [3,9,9,3,5,7,2]	[0,0,0,3,3,3,6]
     [1,5,3,6,7,6,5]	[0,0,2,0,0,5,6]
     입출력 예 설명
     입출력 예 #1
     앞서 설명한 예와 같습니다.

     입출력 예 #2

     [1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.
     [4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다.
     [7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.

     입출력 예 #3

     [1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.
     [3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다.
     [6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다.
     [7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.
     */

    /*
        [ 알아두면 좋을 것들 ]
        배열에 대한 결과값을 바로 확인하고 싶을 때가 있다.
        그때 for문을 통해서 코드를 짜기 보다는, util에서 제공되는 Arrays 객체의 도움을 받는 것이 좋다

        System.out.println(Arrays.toString(array));

     */

    /*
        [ 문제에 대한 해설 ]
        Stack으로 문제를 푸는 것을 의도한 것 같다. 하지만, 실제로 이 문제는 굳이 스텍으로 풀 필요가 없는 문제이다.
        하지만, 스텍으로 풀때 좀더 직관적인 생각을 할 수 있는 것 같다.

        즉 아래와 같이 접근하는 것이다.
        1. 먼저 heights 배열을 차례대로 돌아서 각각의 탑 높이 값에 접근한다.
        2. 각각의 탑 높이 값에 접근했을 시 해당 탑 왼쪽의 배열 값을 for문을 통해 접근하고, 개별적으로 비교를 해간다.
        3. 만약 현재 탑 높이 보다 큰 타워가 있다면, Stack에 차례대로 넣는다.
        4. Stack의 특성에 따라 결과값을 의도한대로 얻을 수 있다.
     */

    public static void main(String[] args) {
//        int[] heights = {6,9,5,7,4};
//        int[] heights = {3,9,9,3,5,7,2};
//        int[] heights = {1,5,3,6,7,6,5};
        int[] heights = {5,4,3,2,1};

        System.out.println(Arrays.toString(solution(heights)));
    }

    public static int[] solution(int[] heights) {
        int cursor;
        int[] answer = new int[heights.length];

        for (int i= heights.length - 1; i>=0; i--) {
            cursor = heights[i];

            for (int j=i-1; j>=0; j--) {

                if (cursor < heights[j]) {
                    answer[i] = j+1;
                    break;
                }

            }

        }

        return answer;
    }
}
